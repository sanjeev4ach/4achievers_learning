



Exception - Exceptions are events due to which java program ends abruptly without giving expected output. Java provides a framework where a user can handle exceptions.

The process of handling Exceptions is called Exception Handling.

Exceptions need to be handled because they break the normal flow of execution of a program. One of the important intentions of exception handling is to prevent this break and continue program execution. Sometimes, you might want to perform some series of actions on occurring of a certain exception.

When an exception occurs, an exception object is created which is technically referred to as ‘Throwing an Exception’ and we add Try/Catch blocks like,

try {
// Protected code 
} catch (ExceptionName e) {
// Catch block 
}
#1) The piece of code which might throw an exception is added inside the Try block.
#2) The Catch statement catches the exception and takes it as a parameter.
#3) When no exception is thrown, the try statement is executed and not the catch statement.

Example: When selenium script fails due to the wrong locator, then the developer should be able to understand the reason for failure and this can be achieved easily if the exception is handled properly in the program.

So it is best to try to avoid WebDriver exceptions whenever possible and catch truly exceptional cases. Use try/catch to handle things that go wrong and are outside my control.

Avoid the ones I can Catch others!

This is the best strategy that has worked for me.

For example, consider a test page that takes more than usual time to load on a test server. We will get frequent exceptions while doing actions on this page. So, instead of just catching this every time, we can

Add a wait command and try to avoid an exception
Use ‘Try/Catch’ to handle in case if a truly exceptional case has occurred
Thereby reducing the chances for exceptions.



NoSuchWindowException
NoSuchFrameException
NoSuchElementException
NoAlertPresentException
InvalidSelectorException
TimeoutException
ElementNotVisibleException
ElementNotSelectableException
NoSuchSessionException
StaleElementReferenceException



1. NoSuchWindowException
One of the most frequent exceptions in Selenium Webdriver, NoSuchWindowException occurs if the current list of windows is not updated. The previous window does not exist, and you can’t switch to it.

To handle this exception, use webdriver methods called “driver.getWindowHandles().”

2. NoSuchFrameException
Similar to NoSuchWindowException, the NoSuchFrameException occurs when switching between multiple frames is not possible.

The solution used for handling NoSuchWindowException must ideally work for this exception too.

3. NoSuchElementException
Happens when the locators are unable to find or access elements on the web page or application. Ideally, the exception occurs due to the use of incorrect element locators in the findElement(By, by) method.

To handle this exception, use the wait command. Use Try/Catch to ensure that the program flow is interrupted if the wait command doesn’t help.

4. NoAlertPresentException
Happens when the user is trying to you switch to an alert which is not present. In simple terms, it means that the test is too quick and is trying to find an alert that has not yet been opened by the browser.

To handle or simply avoid this exception, use explicit or fluent wait in all events where an alert is expected.

5. InvalidSelectorException
This exception occurs due to an incorrect selector. More often than not, the selector syntax is wrong.

To avoid this exception, first, check the locator syntax. If it is incorrect, make sure the locator is syntactically correct.

6. TimeoutException
This exception is thrown if the command did not execute or complete within wait time. As already mentioned, waits are used to avoid NoSuchElementException. However, TimeoutException will be thrown after the page components fail to load within wait time.

Avoiding this exception is simple. All one needs to do is to calculate the average page load time and adjust the wait time accordingly.

7. ElementNotVisibleException
This exception occurs when the WebDriver tries to find an element that is hidden or invisible. To handle this exception, it is essential that the exact reason is identified, which can be due to nested web elements or overlapping web elements.

In the first case, you have to locate and correct the specific element. In the second case, use explicit wait.

8. ElementNotSelectableException
This exception belongs to the same class as InvalidElementStateException. In such exceptions, the element is present on the web page, but the element cannot be selected.

To handle this exception, the wait command must be used.

9. NoSuchSessionException
As the name suggests, the exception is thrown if a method is called post the browser is closed. Other reasons for this exception include a browser crash.

To avoid this handle, ensure that your browser is updated and stable.

10. StaleElementReferenceException => not fresh
This exception occurs when the web element is no longer part of the web page. The element may have been part of the source code, but it is no longer part of the window. There can be multiple reasons for this exception. It can occur either from a switch to a different page, the element is no longer part of DOM or due to frame/window switch

To handle this exception, you can either use Dynamic Xpath for handling DOM operations or try to use the Page Factory Model or try to access the element in loops before throwing the exception.



These were some of the common exceptions in Selenium. Exceptions are part and parcel of any programming. We hope this blog will be useful to you. PSI is a leading enterprise mobility solution provider which offers enterprises with robust test automation framework design services. Our dedicated team of automation engineers and testers is committed to delivering exceptional support to our clients. Our automation testing services promise accuracy with reduced time to market.

==========================================================================================================================================

difference b/w isDisplayed(), isSelected() and isEnabled() method

isDisplayed Method is applicable for all the elements, used to verify the presence of an element within the web page
isSelected method is only applicable for checkbox, radio button and drop down
isEnabled method to check a specific element is enabled/active or disabled, mostly used with buttons
